<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogen.cs" #>
using System;
using System.Reflection.Emit;
using JetBrains.Annotations;

namespace ILGeneratorExtensions
{
	[PublicAPI]
	public static partial class Locals
	{
		
<# foreach (var type in new [] { typeof(bool), typeof(char), typeof(sbyte), typeof(byte), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(float), typeof(double) }) { #>
		/// <summary>
        /// Stores the given value in the given local
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
        /// <param name="local">The local to store value in</param>
		/// <param name="value">The value to store in the local</param>
		/// <exception cref="ArgumentException">Thrown if the local is not of type <see cref="<#= type.Name #>" /></exception>
		[PublicAPI]
		public static void OverwriteLocalWith(this ILGenerator generator, LocalBuilder local, <#= type.Name #> value)
		{
			if (local.LocalType != typeof(<#= type.Name #>))
			{
				throw new ArgumentException("Cannot store a <#= type.Name #> value in a local of type " + local.LocalType.Name);
			}

			generator.LoadConstant(value);
			generator.StoreInLocal(local);
		}

<# } #>
	}
}