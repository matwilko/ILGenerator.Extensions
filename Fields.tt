<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogen.cs" #>
using System;
using System.Reflection;
using System.Reflection.Emit;
using JetBrains.Annotations;

namespace ILGeneratorExtensions
{
	[PublicAPI]
    public static partial class Fields
    {
<# foreach (var type in new [] { typeof(bool), typeof(char), typeof(sbyte), typeof(byte), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(float), typeof(double)}) { #>
		/// <summary>
        /// Pops a reference from the evaluation stack and stores the given value in the given field for that object
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
        /// <param name="field">The field to store the value in</param>
		/// <param name="value">The value to overwrite the field with</param>
		/// <exception cref="InvalidOperationException">Thrown if the field is not of type <see cref="<#= type.Name #>" /></exception>
		[PublicAPI]
		public static void OverwriteFieldWith(this ILGenerator generator, FieldInfo field, <#= type.Name #> value)
		{
			if (field.FieldType != typeof(<#= type.Name #>))
			{
				throw new InvalidOperationException("Type mismatch - field is of type " + field.FieldType);
			}

			generator.LoadConstant(value);
			generator.StoreInField(field);
		}

		/// <summary>
        /// Pops a reference from the evaluation stack and stores the given value in the given field for that object, with volatile semantics
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
        /// <param name="field">The field to store the value in</param>
		/// <param name="value">The value to overwrite the field with</param>
		/// <exception cref="InvalidOperationException">Thrown if the field is not of type <see cref="<#= type.Name #>" /></exception>
		[PublicAPI]
		public static void OverwriteFieldWithVolatile(this ILGenerator generator, FieldInfo field, <#= type.Name #> value)
		{
			if (field.FieldType != typeof(<#= type.Name #>))
			{
				throw new InvalidOperationException("Type mismatch - field is of type " + field.FieldType);
			}

			generator.LoadConstant(value);
			generator.Emit(OpCodes.Volatile);
			generator.StoreInField(field);
		}
<# } #>
	}
}