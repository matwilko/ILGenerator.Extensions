<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogen.cs" #>
using System;
using System.Reflection.Emit;
using JetBrains.Annotations;

namespace ILGeneratorExtensions
{
    public static partial class ArrayManipulation
    {
<# foreach (var type in new [] { typeof(bool), typeof(char), typeof(sbyte), typeof(byte), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(float), typeof(double) }) { #>
		[UsedImplicitly]
		public static void StoreElementAtIndex(this ILGenerator generator, <#= type.Name #> value, uint index)
        {
            generator.LoadConstant(index);
			generator.LoadConstant(value);
            generator.StoreElement<<#= type.Name #>>();
        }

<# } #>
    }
}
