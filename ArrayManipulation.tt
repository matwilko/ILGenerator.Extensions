<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogen.cs" #>
using System;
using System.Reflection.Emit;
using JetBrains.Annotations;

namespace ILGeneratorExtensions
{
    public static partial class ArrayManipulation
    {
<# foreach (var type in new [] { typeof(bool), typeof(char), typeof(sbyte), typeof(byte), typeof(short), typeof(ushort), typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(float), typeof(double) }) { #>
		/// <summary>
        /// Pops an array reference (containing elements of <see cref="<#= type.FullName #>" />), and stores the given <see cref="<#= type.FullName #>" /> value at the given index
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
		/// <param name="value">The <see cref="<#= type.Name #>" /> value to store in the array</param>
		/// <param name="index">The index to store the value at</param>
		[PublicAPI]
		public static void StoreElementAtIndex(this ILGenerator generator, <#= type.Name #> value, uint index)
        {
            generator.LoadConstant(index);
			generator.LoadConstant(value);
            generator.StoreElement<<#= type.Name #>>();
        }

<# } #>
    }
}
