<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var ops = new []
{
new Operation("Add", "Add", "To", true, true),
new Operation("Divide", "Div", "By", false, true),
new Operation("Multiply", "Mul", "By", true, true),
new Operation("Negate", "Neg", "", false, false, true),
new Operation("Remainder", "Rem", "From", false, true),
new Operation("Subtract", "Sub", "", true, true)
};

var numericTypes = new [] { typeof(int), typeof(uint), typeof(long), typeof(ulong), typeof(float), typeof(double) };

#>
using System;
using System.Reflection.Emit;

namespace ILGeneratorExtensions
{
	public static class ArithmeticOperations
	{
<# foreach (var op in ops) { #>
		#region <#= op.Name #>

		public static void <#= op.Name #>(this ILGenerator generator) => generator.Emit(OpCodes.<#= op.Op #>);
<# if (!op.Unary) { #>

<# foreach (var type in numericTypes) { #>
		public static void <#= op.Name #><#= op.Suffix #>(this ILGenerator generator, <#= type.Name #> value)
		{
			generator.LoadConstant(value);
			generator.<#= op.Name #>();
		}

<# } // foreach #>
<# } // if #>

		#endregion

<# } //foreach #>
	}
}
<#+
public class Operation
{
	public string Name;
	public string Op;
	public string Suffix;
	public bool Overflow;
	public bool Signed;
	public bool Unary;

	public Operation(string name, string op, string suffix, bool overflow, bool signed, bool unary = false)
	{
		Name = name;
		Op = op;
		Suffix = suffix;
		Overflow = overflow;
		Signed = signed;
		Unary = unary;
	}
}
#>