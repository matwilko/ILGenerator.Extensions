<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\packages\LibGit2Sharp.0.19.0.0\lib\net40\LibGit2Sharp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="LibGit2Sharp" #>
<#@ output extension=".cs" #>
<#
	string tagVersion;
	string tagHash;

	using (var repo = new Repository(Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile))))
	{
		var tags = repo.Tags.ToDictionary(t => t.Target.Sha);
				
		var currentCommits = new [] { repo.Branches.Single(b => b.IsCurrentRepositoryHead).Tip };
		var result = GetLastTagFromCommit(tags, currentCommits, 0);
		var tag = result.Item1;
		var depth = result.Item2;

		tagHash = tag.Target.Sha;
		var version = new Version(tag.Annotation.Name);
		version = new Version(
			version.Major,
			version.Minor,
			depth,
			(int) ((DateTime.Today - new DateTime(2015, 01, 19)).TotalDays)
		);

		tagVersion = version.ToString();
	}
#>
/*
Copyright 2014 Matthew Wilkinson

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
using System.Reflection;

[assembly: AssemblyVersion("<#= tagVersion #>")]
[assembly: AssemblyFileVersion("<#= tagVersion #>")]
<#+
	public Tuple<Tag, int> GetLastTagFromCommit(IDictionary<string, Tag> tags, IEnumerable<Commit> commits, int depth)
	{
		var lastTag = commits
				.Where(commit => tags.ContainsKey(commit.Sha))
				.Select(commit => tags[commit.Sha])
				.OrderByDescending (tag => new Version(tag.Annotation.Name))
				.FirstOrDefault();
	
		if (lastTag != null)
		{
			return Tuple.Create(lastTag, depth);
		}
		else
		{
			return GetLastTagFromCommit(tags, commits.SelectMany(c => c.Parents).ToList(), depth++);
		}
	}
#>