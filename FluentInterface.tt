<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Reflection.Emit" #>
<#@ output extension=".autogen.cs" #>
using System;
using System.Reflection;
using System.Reflection.Emit;

namespace ILGeneratorExtensions
{
	public static class FluentInterface
	{
<# foreach (var method in typeof(ILGenerator).GetMethods(BindingFlags.Public | BindingFlags.Instance).Where(method => method.Name == "Emit")) { #>
        public static ILGenerator FluentEmit(this ILGenerator generator, <#= string.Join(", ", method.GetParameters().Select(param => param.ParameterType.Name + " " + param.Name)) #>)
        {
            generator.Emit(<#= string.Join(", ", method.GetParameters().Select(param => param.Name)) #>);
            return generator;
        }

<# } #>
    }
}