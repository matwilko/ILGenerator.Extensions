<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".autogen.cs" #>
<#
var ops = new []
{
new Operation("And", "And", false),
new Operation("Complement", "Not", true), new Operation("Not", "Not", true),
new Operation("Or", "Or", false),
new Operation("ShiftLeft", "Shl", false, "By"),
new Operation("ShiftRight", "Shr", false, "By"),
new Operation("ShiftRightUnsigned", "Shr_Un", false, "By"),
new Operation("Xor", "Xor", false)
};
#>
using System;
using System.Reflection.Emit;
using JetBrains.Annotations;

namespace ILGeneratorExtensions
{
	public static class BitOperations
	{
<# foreach (var op in ops) { #>
		#region <#= op.Name #>
<# if (op.Unary) { #>

		/// <summary>
        /// Pop an integer value from the stack and perform a bitwise <#= op.Name.ToLower() #> operation on it
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
		[PublicAPI]
		public static void <#= op.Name #>(this ILGenerator generator) => generator.Emit(OpCodes.<#= op.Op #>);

<# } else { #>

		/// <summary>
        /// Pop two integer values from the stack and perform a bitwise <#= op.Name.ToLower() #> operation on them
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
		[PublicAPI]
		public static void <#= op.Name #>(this ILGenerator generator) => generator.Emit(OpCodes.<#= op.Op #>);

<# foreach (var type in new [] { typeof(int), typeof(uint), typeof(long), typeof(ulong) }) { #>
		/// <summary>
        /// Pop an integer value from the stack and perform a bitwise <#= op.Name.ToLower() #> operation <#= op.Suffix.ToLower() #> the given value
        /// </summary>
        /// <param name="generator">The <see cref="T:System.Reflection.Emit.ILGenerator" /> to emit instructions from</param>
        /// <param name="value">The value to bitwise <#= op.Name.ToLower() #> the stack value <#= op.Suffix.ToLower() #></param>
		[PublicAPI]
		public static void <#= op.Name #><#= op.Suffix #>(this ILGenerator generator, <#= type.Name #> value)
		{
			generator.LoadConstant(value);
			generator.<#= op.Name #>();
		}

<# } // if #>
<# } // foreach #>
		#endregion
<# } // foreach #>
	}
}
<#+
public class Operation
{
	public string Name;
	public string Op;
	public bool Unary;
	public string Suffix;

	public Operation(string name, string op, bool unary, string suffix = "With")
	{
		Name = name;
		Op = op;
		Unary = unary;
		Suffix = suffix;
	}
}
#>